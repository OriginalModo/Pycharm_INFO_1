"""

 Самое Важное!!!
 Всегда ДУМАТЬ! перед тем, как что-либо сделать, необходимо всё тщательно обдумать

 Радоваться Жизни  Радоваться разным мелочам

 Ценить:         Ценить то что есть и стремиться к лучшему, Ценить сегодняшний день и брать МАКСИМУМ
 Быть проще:     Ко всему относиться Проще и Спокойнее без Волнения
 Слушать Других: Прислушиваться к мнению других людей они могут быть правы  И делать выводы
 Время:          Тайм-менеджмент   Грамотное распределение времени, Контроль Времени, Правильно раставлять Приоритеты
 Уверенность:    Быть уверенным в себе НО Оценивать свои силы!
 Развития:       Развиваться, Учиться, учиться и ещё раз - учиться, Саморазвитие
 Не Надеяться:   Надеяться только на себя
 Контроль:       Быть менее Эмоциональным, Совладать с Эмоциями, Контролировать свои эмоции в любой ситуации
 Внимательность: Быть Внимательным
 Спокойствие:    Быть Спокойнее, Перестать Нервничать , Быть Расслабленным, Не Злиться на себя и на других
 Режим:          Правильный Сон, Пить Воду
 Зарядка:        Бег, Тренировки, Стойка на Голове
 Тельце в тепле: НЕ переохлаждаться

 Молчание золото:  Лучше промолчать, чем сказать и потом жалеть о том, что сказал
 Соломон:          Все пройдёт, и это тоже пройдёт
 Вообще это замечательный подход: осознать, что проблема не такая уж и проблема, и вполне решаема.
 Кто ищет-тот всегда найдет!
 Искать Другие способы
 Не спеши, а то успеешь...   Успеешь, но не туда куда хотел...
 Подумай, нужно ли тебе ЭТО и для Чего
 Надо принимать вещи такими, как они есть, и пользоваться ими с наибольшей для себя выгодой.
 Если научиться принимать вещи как они есть, страдание исчезнет.
________________________________________________________________________________________________________________________

 Podman — это инструмент для управления контейнерами, который позволяет создавать, запускать и управлять контейнерами и
 подами без необходимости в демоне, как в Docker. Он обеспечивает совместимость с Docker CLI и позволяет работать
 с контейнерами от имени обычного пользователя, что повышает безопасность.


 Podman и Docker — это инструменты для управления контейнерами, но имеют несколько ключевых отличий:

 Архитектура:

 Docker использует клиент-серверную архитектуру, где демон (Docker daemon) управляет контейнерами.
 Podman работает без демона и использует архитектуру "без демона", что делает его более безопасным и простым в
 использовании в некоторых сценариях.

 Пользовательские права:

 Docker обычно требует привилегированных прав для работы с демоном.
 Podman может работать от имени обычного пользователя без необходимости в повышенных привилегиях.
 Совместимость:

 Podman поддерживает команды Docker CLI, что облегчает переход с Docker на Podman.
 Поддержка подов:

 Podman имеет встроенную поддержку для управления подами (группами контейнеров), что делает его более подходящим для
 работы с многоконтейнерными приложениями.

 Эти отличия делают каждый инструмент более подходящим для различных сценариев использования.



 Docker - Изолирует приложение и упаковывает все в контейнер
 Kubernetes - Инструмент для оркестровки и управления деплоем контейнеров на нескольких машинах паралельно
 K8s - Сокращенное название Kubernetes      В сокращении “K8S” цифра 8 - это восемь букв между K и S.

 Docker и Kubernetes часто работают вместе. Docker используется для изоляции приложений в контейнерах,
 а Kubernetes как планировщик для развёртывания и масштабирования.

 Docker — это платформа, которая позволяет упаковать в контейнер приложение со всем окружением и зависимостями,
 а затем доставить и запустить его в целевой системе.

 Приложение, упакованное в контейнер, изолируется от операционной системы и других приложений.

 Контейнеры позволяют разработчикам упаковать приложение со всеми его зависимостями и развернуть как единое целое.

 Виртуализация в Docker реализуется на уровне ОС. Виртуальная среда запускается прямо из ядра основной
 операционной системы и использует её ресурсы.

 Docker host — это операционная система, на которую устанавливают Docker и на которой он работает.
 Docker daemon — служба, которая управляет Docker-объектами: сетями, хранилищами, образами и контейнерами.
 Docker client — консольный клиент, при помощи которого пользователи взаимодействуют с Docker daemon и отправляют
 ему команды, создают контейнеры и управляют ими.
 Docker image — это неизменяемый образ, из которого разворачивается контейнер.
 Docker container — развёрнутое и запущенное приложение.
 Docker Registry — репозиторий, в котором хранятся образы.
 Dockerfile — файл-инструкция для сборки образа.
 Docker Compose — инструмент для управления несколькими контейнерами. Он позволяет создавать контейнеры и задавать их конфигурацию.
 Docker Desktop — GUI-клиент, который распространяется по GPL. Бесплатная версия работает на Windows, macOS,
 а с недавних пор и на Linux. Это очень удобный клиент, который отображает все сущности Docker и позволяет запустить
 однонодовый Kubernetes для компьютера.

 GUI расшифровывается как Graphical User Interface (графический интерфейс пользователя) - Это тип интерфейса, который
 позволяет пользователям взаимодействовать с компьютером или электронными устройствами посредством визуальных элементов,
 таких как значки, кнопки и окна.

 GPL расшифровывается как “General Public License” - GPL — лицензия свободных программ, и следовательно, она разрешает
 людям использовать и даже распространять программу без требования платить за это кому бы то ни было. Вы можете взимать
 плату с людей за получение копии от вас.

 GPL - коротко обозначаемая как “GNU GPL”
 Цель GNU GPL — предоставить пользователю права копировать, модифицировать и распространять (в том числе на коммерческой основе)

 В чем разница между лицензиями GPL и LGPL?
 GPL (General Public License) – это как договор , который говорит: если ты меняешь или делаешь что-то новое с этим кодом
 ты должен поделиться этими изменениями на тех же условиях.

 LGPL – похожа, но позволяет вставлять код в закрытые проекты, требуя открыть только изменения в самой библиотеке.

 Nodes (узлы, ноды) - физические или виртуальные машины, на которых разворачиваются и запускаются контейнеры с приложениями.
 Каждая нода содержит компоненты, которые позволяют запускать сервисы контейнеризации (например, Docker или Containerd).

 Термин "узлы" здесь означает физические серверы и виртуальные машины. На компьютере разработчика выполняется
 узел Docker, где развернуты образы Docker с создаваемым приложением и всеми его зависимостями.
 Узел – это машина, на которой работают поды. Это может быть физический или виртуальный сервер

 Kubernetes Pod:
 Под — это абстрактный объект Kubernetes, представляющий собой группу из одного или нескольких контейнеров приложения
 (например, Docker) и совместно используемых ресурсов для этих контейнеров.
 Под – это стандартное развертываемое устройство в Kubernetes. Поды состоят из одного или нескольких контейнеров, и в
 поде контейнеры используют одни и те же системные ресурсы, такие как хранилище и сеть. Каждый под получает уникальный IP-адрес.
 Pod представляет собой запрос на запуск одного или более контейнеров на одном узле.
 Pod — это один и единственный объект в Kubernetes, который приводит к запуску контейнеров. Нет pod'а — нет контейнера!
 Задача планировщика (Scheduler) в Kubernetes — запланировать pod, то есть назначить ему подходящий узел в кластере
 Kubernetes для последующего запуска.


 Docker изначально создавался под Linux. Поэтому на Windows и macOS запускают виртуальную машину с Linux,
 а поверх неё — Docker. В macOS используют VirtualBox, а в Windows — Hyper-V.

 Hyper-V позволяет запускать несколько операционных систем в виде виртуальных машин в Windows

 Работа поверх виртуалок повышает потребление ресурсов. Поэтому Docker на macOS и Windows работает медленнее
 и с рядом ограничений. Для разработки это приемлемо, но «в бою» так делать никто не будет. На всех популярных
 платформах в проде используют Linux.

 Docker и виртуальные машины (VM) – это две технологии, используемые при развертывании приложений

 --- Чем виртуализация отличается от контейнеризации?
 Контейнеры и виртуальные машины — это разные способы виртуализации. Только виртуалка реализует её на уровне железа,
 а Docker — на уровне операционной системы.

 Виртуальная машина функционирует как отдельный компьютер с собственным оборудованием и операционной системой.

 Виртуальные компьютеры вполне полноценны. На них можно установить операционную систему любого семейства и работать в ней,
 например, через графический интерфейс в многопользовательском режиме, устанавливая и запуская множество приложений и сервисов.

 --- Если цель виртуалки — полностью воспроизвести устройство компьютера,
 --- то основная цель Docker — создать среду для одного приложения.

 Виртуальная среда контейнера запускается внутри операционной системы. Ей не нужно виртуализировать оборудование
 — она использует его через ОС. Поэтому контейнеры Docker потребляют меньше ресурсов, быстрее развёртываются,
 проще масштабируются и меньше весят.

 --- Выделять под приложение целую виртуалку, устанавливать и настраивать операционную систему, раздавать права доступа
 — слишком дорого. В большинстве случаев достаточно простого окружения, в котором запустится приложение.
 Для этого как раз подходит контейнер, который вмещает одно главное приложение.

 Docker и виртуальные машины не очень хорошо сочетаются друг с другом. Да, иногда в продакшене сервер нарезают
 на виртуалки и в них запускают контейнеры. Но такая схема, с двойной виртуализацией, приводит к избыточному
 расходу ресурсов. Её часто критикуют, и, надо признаться, по делу. Если в компании всё же сложилась такая практика,
 вместо гипервизора можно поставить Kubernetes, который будет устанавливать приложения напрямую на железо.

 Если же у вас много ресурсов, то можно поставить Docker на виртуалку, чтобы изолировать приложения друг от друга.

------------------------------------------------------------------------------------------------------------------------

 Контейнеризация — это способ упаковки приложения и всех его зависимостей в один образ, который запускается
 в изолированной среде, не влияющей на основную операционную систему.

 Контейнеризация напоминает виртуализацию, но технологии отличаются друг от друга. Виртуализация работает как отдельный
 компьютер со своей операционной системой и виртуальным оборудованием. Внутри одной операционной системы можно
 запустить другую. При контейнеризации виртуальная среда может запускаться прямо из ядра основной ОС и не виртуализирует
 оборудование. Поэтому контейнер может работать только в той же операционной системе, что и основная.
 Так как контейнеры не виртуализируют оборудование, они потребляют меньше ресурсов.

 Сервер еще называют Docker-движком или демоном (daemon). Это фоновый процесс, который непосредственно управляет
 контейнерами. Именно демон создает, разворачивает и запускает контейнеры. Его можно сравнить с двигателем машины.

 Docker контейнер — это стандартизированный, изолированный и портативный пакет программного обеспечения, который
 включает в себя все необходимое для запуска приложения, включая код, среду выполнения, системные инструменты,
 библиотеки и настройки. Контейнеры позволяют упаковать приложение и все его зависимости в единый объект,
 который может быть запущен на любой системе, поддерживающей Docker, без изменения среды выполнения.

 Преимущества использования Docker контейнеров:

 1) Изоляция: Контейнеры изолируют приложения друг от друга и от хост-системы, что уменьшает возможные конфликты между
 зависимостями и обеспечивает более надежную среду выполнения.
 2) Портативность: Контейнеры могут быть созданы и запущены на различных системах без изменений, что делает
 развертывание приложений более простым и надежным.
 3) Эффективность использования ресурсов: Контейнеры используют общие ресурсы операционной системы и разделяют ядро,
 что делает их более эффективными по сравнению с виртуальными машинами.
 4) Масштабируемость: Контейнеры легко масштабируются горизонтально, позволяя быстро добавлять экземпляры приложения
 в ответ на увеличение нагрузки.
 5) Управление версиями: Контейнеры позволяют управлять версиями приложений и их зависимостей,
 что упрощает процесс развертывания и обновления.

 Чем контейнеризация отличается от виртуализации
 Контейнеры и виртуальные машины (ВМ) — это методы изоляции приложений и окружений. Docker использует виртуализацию
 на уровне операционной системы, позволяя запускать приложения в изолированных контейнерах, которые делят ядро ОС
 с хост-системой. ВМ, напротив, создают полные виртуальные компьютеры с отдельными ОС и ресурсами.

 Это означает, что Docker-контейнеры более легкие, потому что они не требуют дублирования всей ОС, как ВМ.
 Контейнеры также быстрее запускаются и имеют меньший объем, что делает их более эффективными в ресурсоемких средах.
 Однако ВМ предоставляют большую изоляцию, так как каждая ВМ имеет свою собственную ОС и не зависит от хост-системы.

 Хост является компьютером или мобильным устройством, которое подключено к интернету.

 Таким образом, Docker контейнеры предоставляют легковесное и быстрое решение для изоляции приложений,
 в то время как виртуальные машины обеспечивают более глубокую изоляцию за счет полной виртуализации.

 При остановке и перезапуске контейнера можно потерять часть рабочей информации, которая в нем записана. Чтобы этого
 избежать, программисты стремятся разрабатывать приложения с минимальным использованием хранилищ внутри контейнеров.
 Но обойтись без хранения данных получается не всегда, а от основной системы контейнер изолирован. Существует несколько
 способов решить проблему.

 Задачи, которые решает Docker:

 -- Развертывание среды или приложения
 Docker позволяет перенести приложение со всеми зависимостями на другую систему с помощью пары команд в терминале.
 Настройка зависимостей вручную занимает больше времени. Также с помощью Docker можно быстро развернуть рабочую среду
 с определенными настройками. Существуют «системные контейнеры», которые содержат дистрибутивы ОС.

 -- Изолированный запуск
 Docker позволяет запустить приложение отдельно от всей системы без конфликтов с другими программами.
 Программа становится практически автономной и не вызывает ошибок зависимости.

 -- Контроль ресурсов
 Еще одна возможность Docker — распределение ресурсов между разными приложениями. Неизолированные процессы могут
 конкурировать за память и вычислительные мощности процессора. Изолированные друг от друга программы не делают этого.
 Docker позволяет эффективнее использовать ресурсы и не допускать конфликтов.

 --- Недостатки Docker ---
 -- Высокая потребность в ресурсах:

 Docker добавляет дополнительный слой абстракции и требует дополнительных вычислительных ресурсов. Это означает,
 что нужно балансировать между удобством и оптимальным использованием ресурсов.

 -- Оркестрация для крупных приложений

 Docker хорош для управления небольшим числом контейнеров. Однако при наличии 50–100 сервисов может потребоваться
 оркестратор, так как Docker не обладает достаточными инструментами для эффективного управления ресурсами и обеспечения
 надежности в случае разных сценариев обновления контейнеров.

 Большие приложения с микросервисной архитектурой часто используют оркестраторы, такие как Kubernetes или OpenShift,
 чтобы обеспечить более высокий уровень управления и надежности. Docker в таких случаях часто оказывается недостаточным.

------------------------------------------------------------------------------------------------------------------------

 --- Что такое Kubernetes и сравнение его с Docker ---

 Kubernetes — это платформа для оркестрации контейнеров, которая позволяет построить распределенную отказоустойчивую
 систему. Kubernetes автоматически управляет жизненным циклом контейнеров, поддерживает стабильное состояние системы
 и распределяет нагрузку по разным узлам.


 Kubernetes и Docker нельзя сравнивать напрямую. Docker — инструмент для создания и запуска контейнеров,
 а Kubernetes — оркестратор, инструмент для управления контейнерами. Kubernetes позволяет построить кластер (Cluster)
 — распределенную отказоустойчивую систему, в то время как Docker работает на отдельном узле.

 Cluster (кластер) - определенное количество данных или аппаратных мощностей, объединенных в логическую группу
 и образующих единый ресурс.

 Кластер Kubernetes объединяет несколько узлов Docker в пул и предоставляет доступ к ним как к единому виртуальному
 узлу Docker, что позволяет развертывать несколько узлов в кластере и осуществлять масштабирование, добавляя любое
 число экземпляров контейнеров.


 --- Еще есть Docker Swarm — это встроенный в докер инструмент оркестровки контейнеров. ---
 Его как раз и можно полноценно сравнивать с Kubernetes

 Главное преимущество Kubernetes перед простыми Docker-контейнерами    —      АВТОМАТИЗАЦИЯ

 Docker работает в рамках отдельных узлов. Если у вас несколько узлов, то на каждом из них запущен докер-демон,
 который ничего не знает о существовании других узлов. Каждый демон знает лишь о том, что происходит на его узле.
 И поэтому обычными докер-контейнерами сложно управлять централизованно.


 У Kubernetes есть центральная точка управления — API-сервер. В кластере может быть много узлов, контейнеров и настроек,
 но всеми ими можно управлять через единый сервер. В кластер можно отправить команду
 (например, чтобы обновить наше приложение), и Kubernetes сам найдет, на каких узлах оно находится, и обновит его.

 --- Управление конфигурациями и конфиденциальными данными ---

 Docker. Так как докер-демон работает отдельно на каждом узле, все манипуляции по доставке и синхронизации
 этих файлов между узлами нужно проводить вручную. К тому же у Docker-контейнеров нет возможности хранения
 конфиденциальных данных в зашифрованном виде. Докер может использовать только переменные окружения.

 Host, включенный в состав приложения – это узел (node). Может быть двух видов: рабочим и управляющим.


 В Kubernetes есть средство для центрального управления конфигурациями — ConfigsMaps для настроек и Secrets для
 конфиденциальных данных. Если разместить в них свои настройки, то приложения смогут получить к ним доступ из любого узла.

 --- Автомасштабирование узлов ---

 Docker. Контейнеры не могут автомасштабироваться. Так как каждый докер-демон работает только в рамках своего узла,
 он не знает, что происходит на остальных. Докер-демон не может следить за нагрузкой, создавать дополнительные
 контейнеры или подключать новые узлы.


 Kubernetes умеет автомасшабироваться. «Из коробки» он умеет масштабировать количество контейнеров, и дополнительно
 можно настроить подключение новых узлов. Когда нагрузка на приложение возрастет, Kubernetes добавит новые инстансы
 приложения, а при необходимости и подключит новые узлы. Когда нагрузка спадет,
 Kubernetes завершит лишние контейнеры и освободит узлы.


 --- Обновления приложений и откаты ---

 В Docker нужно обновлять отдельно каждый контейнер. У контейнеров нет средства, чтобы одной или несколькими командами
 обновить все инстансы. Нужно найти все узлы, на которых работает приложение, и обновлять их по очереди.


 Kubernetes. Чтобы выкатить новую версию приложения в Kubernetes, достаточно в Deployment-файле указать новую версию в
 имени образа. При этом если нужно выполнить обновление по типу Rolling-Update, это тоже достаточно указать в Deployment-файле.
 Если после обновления нужно откатиться, достаточно выполнить команду rollout, и Kubernetes сам откатит все контейнеры.

 --- Система хранения данных ---

 У Docker есть тома (Volumes), которые нужны для упрощения работы с постоянными данными. Но в любом случае тома нужно
 дополнительно настраивать, причем делать это придется для каждого контейнера отдельно. Например, у нас есть сетевое
 хранилище Ceph. Чтобы подключить его к контейнеру, сначала нужно создать том, подключить его ко всем узлам с
 контейнерами и потом смонтировать этот том в каждый отдельный контейнер.


 Kubernetes намного упрощает работу с дисками. Полностью «из коробки» подключить диски не получится, тут всеравно
 потребуется некоторая настройка и дополнительные инструменты. Но сделать это гораздо проще за счет объектов
 PersistentVolume и PersistentVolumeClaim. Сначала нужно создать том и настроить его один раз, а потом каждый контейнер
 может самостоятельно запрашивать ресурсы, без необходимости дополнительных манипуляций

 --- Распределение нагрузки и маршрутизация трафика из внешней сети ---

 Docker. В простых докер-контейнерах нет возможности распределять нагрузку между инстансами приложения. Например,
 приложение хочет обратиться к сервису. Чтобы это сделать, оно должно знать IP-адрес этого сервиса. А если у сервиса
 несколько инстансов, то приложение должно знать все адреса и само решать, в какой именно инстанс обратиться. Если один
 из контейнеров сервиса перезапустится и получит новый адрес, приложение должно как-то об этом узнать. Это неудобный
 и неправильный подход к разработке.

 Проблема усугубляется, если к сервису нужно обращаться из внешней сети. Для этого придется поддерживать в актуальном
 состоянии и еще и таблицу маршрутизации для внешнего трафика.


 Kubernetes берет распределение трафика на себя. Если рассматривать пример выше, то Kubernetes позволяет над всеми
 инстансами сервиса создать единый объект типа Service. Этот объект сам следит за всеми инстансами, и, если контейнер
 перезапускается, он сам обновит информацию о его новом адресе. И чтобы приложение могло обратиться к сервису,
 достаточно знать одно доменное имя, которое будет всегда постоянным.

 Также Kubernetes умеет перенаправлять внешний трафик в контейнеры. Для этого нужно установить и настроить
 Ingress Controller, но это гораздо проще, чем самостоятельно настраивать и поддерживать маршрутизацию. Kubernetes
 позволяет сделать так, чтобы к приложениям можно было обращаться по доменным именам или URL-путям. Ingress Controller
 сам будет перенаправлять трафик на нужный инстанс контейнера.


 Kubernetes — это готовая платформа. С помощью Kubernetes можно построить платформу промышленного уровня.
 В нем есть механизмы авторизации, возможность разделять работу нескольких команд и проектов, отдельные пространства
 имен и многое другое. С простыми докер-контейнерами сложно построить такую систему самостоятельно.

 Kubernetes — это проект-конструктор. Для Kubernetes существует много сторонних расширений и интеграций с другими
 инструментами: мониторинг, безопасность, инструменты разработки и многое другое. Это позволяет настроить его под
 себя так, как нужно именно для ваших нужд.

 --- Когда использовать Kubernetes, а когда достаточно Docker-контейнеров? ---

 Если у вас мало контейнеров и они все работают на одном узле, вам будет достаточно простых Docker-контейнеров.
 Kubernetes нужен, когда у вас много контейнеров и узлов, которыми нужно управлять. Также Kubernetes подходит,
 если вам нужна распределенная отказоустойчивая система.

"""










