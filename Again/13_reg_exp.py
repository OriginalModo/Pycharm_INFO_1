#Плюсы регулярных выражений:
# 1) Python очень быстро и эффективно работает с регулярками, быстрее многих других ЯП, в том числе компилируемых
# 2) могут помочь там, где иначе пришлось бы предпринять много лишних действий (разбить текст, вырезать знаки препинания и т.п.)
# 3) при определенных условиях могут быть короткими и читаемыми
#
# Минусы:
# синтаксис! Он не связан с языком программирования, не всегда понятен, для сложных шаблонов может быть большая строка,
# состоящая из набора разных символов, что не добавляет оптимизма.
#
# Где регулярки выигрывают - там где большой текст или сложный шаблон для поиска. Понятно что фразу из 3 слов
# проще и быстрее обработать методами строки, но по мере роста  объемов текста и сложности шаблона регулярки выходят
# на первый план и по скорости и по краткости.
#
# Совет из практики: если регулярка(само выражение) большая, то вынесите ее в константы с понятным именем и
# напишите коммент с примером ее работы.
#
# Каждому питонисту советую прочесть документацию библиотеку re чисто для ознакомления, чтобы было представление
# о том, что там есть. Тем, кто парсит сайты и работает с текстами -регулярки нужно просто знать!

import re

text = """История России насчитывает более тысячи лет, начиная с переселения восточных славян на Восточно-Европейскую
равнину в VI—VII веках, впоследствии разделившихся на русских, украинцев и белорусов[1]. История страны разделяется
примерно на семь периодов: древнейший (догосударственный) (до конца IX века н. э.) период, период Киевской Руси 
(до середины XII века), период раздробленности (до начала XVI века), период единого Русского государства (с
 1547 года — царства)
(конец XV века — 1721), период Российской империи (1721—1917), советский период (1917—1991) и новейшая история (с 1991
 года).
 """

info = '10 EUR 20 EUR 30 - EURO EUROPE'

text_2 = """Знаки препинания первая и вторая запятая - причастный оборот, третья запятая - подчинительная связь между
предложениями, четвертая запятая - сочинительная связь между предложениями, пятая запятая - сочинительная связь между 
предложениями, шестая запятая - подчинительная связь между предложениями, седьмая запятая  - подчинительная связь
между предложениями.
"""

# years = re.findall(r'\d{4}', text)
periods = re.findall(r'\d{4}—\d{4}', text)

result = re.sub(r'\bEUR\b', 'USD', info)

# print(info.replace(' EUR ', ' USD '))

words = re.split(r'\W+', text_2)
# words = text_2.split(' ')

print(words)
