# yield показывает что функция - генератор
# генератор ленивый (lazy)
# после выполнения yield встает на паузу!

# Любая функция, содержащая ключевое слово yield является функцией-генератором (независимо от наличия return)
# и при вызове возвращает объект-генератор.
# Важные моменты:
# 1) ленивый, не выполняется пока не попросить значение
# 2) одноразовый -при исчерпании кидает StopIteration (в for этого не видно, ибо обрабатывается внутри)
# 3) после выполнения yield встает на паузу, при этом сохраняет все внутреннее состояние (аргументы, локальные переменные)
# 4) при повторном запросе (next) продолжает работу с места остановки
#
# Удобен при работе с большими данными, но и в целом может применяться там, где нам нужно получать наборы данных,
# обрабатывать их.

squares = (i for i in range(0, 11, 2))

def squares2():
    print('Generator working...')
    for i in range(0, 11, 2):
        yield i ** 2

def pause():
    print('Generator working...')
    while True:
        print(a)
        yield a


a = 10
gen = pause()
print(next(gen))
a = 20
print(next(gen))
a=30
print(next(gen))

